package simpleCounter;


public class CounterModel implements CounterInterface {

	private int counter = 0;
	private static int nbrCounters = 0;
	private int modulus;		
		
	public CounterModel(){
		this.modulus = 10;
		nbrCounters ++;
	}
	
	public CounterModel(int modulus){
		this.modulus = modulus;
		if(modulus < 0){
			throw new IllegalArgumentException("Negative number is not valid!");		
		}
	}

	public int getModulus(){
		
		return modulus;		
	}
	
	public int getNbrOfCounter(){
	//	nbrCounters--;
		return nbrCounters;
	}
	
	public void increment() {
		counter = (counter+1) % modulus;
	}

	public void decrement() {
		if(counter == 0){
			counter = modulus-1;
			
		} else {
			counter = (counter-1);
		}
	}

	public void reset() {
		counter = 0;
	}

	public int getValue() {
		
		return counter;
	}
	public String toString(){
		String s = String.valueOf(getValue()) + "%" + String.valueOf(getModulus());
		return s;
	}
	public boolean equals(Object c){
		if(c != null && c.getClass() ==  this.getClass()){
			CounterModel cm = (CounterModel) c;
			return cm.getValue() == this.getValue() && cm.getModulus() == this.getModulus();
		}
		return false;
	}
}

